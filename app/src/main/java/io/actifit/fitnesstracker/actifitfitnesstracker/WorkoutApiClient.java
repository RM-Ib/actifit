package io.actifit.fitnesstracker.actifitfitnesstracker;

import android.content.Context;
import android.util.Log;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.google.gson.Gson; // Requires Gson dependency

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkoutApiClient {
    private static final String TAG = "WorkoutApiClient";
    private static final String API_SAVE_WORKOUT_ENDPOINT = "/saveworkout"; // Matches your Node.js endpoint

    // Get a RequestQueue instance (use application context to avoid memory leaks)
    private static RequestQueue requestQueue;
    private static synchronized RequestQueue getRequestQueue(Context context) {
        if (requestQueue == null) {
            requestQueue = Volley.newRequestQueue(context.getApplicationContext());
        }
        return requestQueue;
    }

    public interface SaveWorkoutCallback {
        void onSuccess();
        void onFailure(String errorMessage);
    }

    /**
     * Sends the workout plan data to the backend API for saving.
     *
     * @param context      Application context (or Activity context)
     * @param userId       The ID of the user who generated the workout. Must match backend user identification.
     * @param jwtToken     The JWT token for authentication.
     * @param workoutPlan  The WorkoutPlan object generated by the AI.
     * @param explanation  The explanation string from the AI response.
     * @param callback     Listener for success or failure.
     */
    public static void saveWorkoutPlan(Context context, String userId, String jwtToken,
                                       String workoutName, WorkoutPlan workoutPlan, String explanation,
                                       SaveWorkoutCallback callback) {

        String url = Utils.apiUrl(context) + API_SAVE_WORKOUT_ENDPOINT; // Combine base URL and endpoint

        // --- Prepare the JSON Request Body ---
        JSONObject requestBody = new JSONObject();
        try {
            requestBody.put("userId", userId); // Send the user ID
            requestBody.put("workoutName", workoutName);
            requestBody.put("description", workoutPlan.getDescription()); // Use plan description
            // You might want to include the separate explanation field too if needed on backend
            // requestBody.put("explanation", explanation);
            requestBody.put("timestamp", System.currentTimeMillis()); // Add a timestamp

            // Convert List<Exercise> to JSON Array of Exercise objects
            Gson gson = new Gson();
            String exercisesJsonString = gson.toJson(workoutPlan.getExercises()); // Convert the list to a JSON string
            JSONArray exercisesJsonArray = new JSONArray(exercisesJsonString); // Parse the JSON string into a JSONArray

            requestBody.put("exercises", exercisesJsonArray);

        } catch (JSONException e) {
            Log.e(TAG, "Error building JSON request body", e);
            if (callback != null) {
                callback.onFailure("Error preparing data for saving.");
            }
            return; // Stop if JSON creation fails
        }

        // --- Create the Volley POST Request ---
        JsonObjectRequest saveRequest = new JsonObjectRequest(
                // Change Method to POST
                Request.Method.POST,
                url,
                requestBody, // Pass the JSON request body here
                new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject response) {
                        // Handle successful API response
                        Log.d(TAG, "Workout save API response: " + response.toString());

                        // Use the robust success check logic
                        boolean isSuccessful = !response.has("error") &&
                                (response.optBoolean("success", false) ||
                                        response.optString("status", "").equals("success"));

                        if (isSuccessful) {
                            if (callback != null) {
                                callback.onSuccess(); // Notify callback on success
                            }
                        } else {
                            // API returned a non-error response, but indicates failure
                            String errorMessage = response.optString("message", "Unknown save error");
                            if (response.has("error")) {
                                errorMessage = response.optString("error", errorMessage);
                            }
                            Log.w(TAG, "Workout save API indicated failure: " + errorMessage);
                            if (callback != null) {
                                callback.onFailure(errorMessage);
                            }
                        }
                    }
                },
                new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        // Handle Volley network/server errors
                        Log.e(TAG, "Volley error saving workout:", error);

                        String errorMessage = "Network error saving workout plan.";
                        // ... (Error parsing logic remains the same) ...
                        if (error.networkResponse != null) {
                            errorMessage += " Status code: " + error.networkResponse.statusCode;
                            try {
                                String responseBody = new String(error.networkResponse.data, StandardCharsets.UTF_8);
                                Log.e(TAG, "Error response body: " + responseBody);
                                JSONObject errorJson = new JSONObject(responseBody);
                                String apiErrorMsg = errorJson.optString("message", errorJson.optString("error", null));
                                if (apiErrorMsg != null) {
                                    errorMessage += " Details: " + apiErrorMsg;
                                }
                            } catch (Exception e) {
                                Log.e(TAG, "Could not parse error response body", e);
                            }

                        } else if (error.getMessage() != null) {
                            errorMessage = "Volley error: " + error.getMessage();
                        } else {
                            errorMessage = "Unknown network error.";
                        }


                        if (callback != null) {
                            callback.onFailure(errorMessage); // Notify callback on error
                        }
                    }
                }) {

            // --- Add Authentication Headers Here ---
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                final Map<String, String> params = new HashMap<>();
                // Content-Type is often added automatically for JSON request bodies,
                // but explicitly setting it doesn't hurt and can be necessary depending on Volley version/config.
                params.put("Content-Type", "application/json");
                // Your custom authentication header using context and static token
                params.put(context.getString(R.string.validation_header),
                        context.getString(R.string.validation_pre_data) + " " + LoginActivity.accessToken);
                return params;
            }

            // Volley automatically sets getBodyContentType() to application/json
            // when using JsonObjectRequest with a non-null body, so overriding is usually not needed.
            // @Override
            // public String getBodyContentType() {
            //    return "application/json; charset=utf-8";
            // }
        };

        // Set a tag for cancelling requests if needed (e.g., when activity finishes)
        saveRequest.setTag(TAG); // Using the class TAG is common

        // Add the request to the RequestQueue
        getRequestQueue(context).add(saveRequest);
    }

    // Optional: Method to cancel pending requests (useful in Activity/Fragment onDestroy)
    public static void cancelRequests(Context context) {
        getRequestQueue(context).cancelAll(TAG);
    }
}
